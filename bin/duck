#!/bin/bash

OUT=$PWD

SHARED_ROOT="/usr/share/duck"
SCRIPT_ROOT="$(dirname $(dirname $(realpath $0)))"

# root alternatives
roots[0]="$SHARED_ROOT"
roots[1]="$SCRIPT_ROOT"
roots[2]="$PWD"

ROOT=""
CFGDIR=""

notice()  { echo "N: $@" 1>&2; }
error()   { echo "E: $@" 1>&2; }
warning() { echo "W: $@" 1>&2; }

read_config_lines() {
    # helper function to read configuration lines from several places at once.
    files="$@"
    i=0

    while [[ $# > 0 ]]; do
        if [[ -f $1 ]]; then
            grep -E '^[^#]' "$1"
            i=$[ $i + 1 ]
        fi
        shift
    done

    if [[ $i -eq 0 ]]; then
        warning "No configuration found: $files"
    fi
}

for p in ${roots[@]}; do
    CFGDIR="$p/files"
    [[ -d $CFGDIR ]] && ROOT="$p" && break
done

if [[ -z "$ROOT" ]]; then
    error "could not determine duck root, should be one of ${roots[@]}"
    exit 1
fi

DUCK_PATH=${DUCK_PATH:="$PATH:/sbin:/usr/sbin:/usr/local/sbin"}

fakeroot=fakeroot
fakechroot=fakechroot
chroot=chroot
qemu=qemu-system-x86_64
cpio=cpio

multistrap=multistrap

# runned action
default_action="setup"

# shell
o_shell=/bin/sh

# force a base system update
o_update="no"

# output path to initrd
o_dir="$PWD"

# command to run when doing stuff as root.
o_root_cmd=""

# commands that have default values, set in read_opts.
# directory to orchestrate initrd building.
o_target=""
# where to build initrd.gz
o_initrd=""
# where to run kernel image from
o_kernel=""
# where the multistrap configuration should be
o_multistrap_config=""
# path to fakechroot environment setting.
o_fakechroot_env=""

print_help() {
    cat <<ENDL
usage: duck [action]

Duck is an automated installation builder system.

  -t <target> : Specify target directory to build install image in.
  -s <shell>  : Specify which shell to use (default: $o_shell).
  -d <out>    : Specify where to write packed initrd (default: <pwd>).
  -i <initrd> : Specify which shell to use (default: <out>/initrd.gz).
  -k <kernel> : Specify which shell to use (default: <out>/vmlinuz).
  -t <target> : Manually specify where to build initrd target.
  -m <config> : Multistrap config (default: <out>/duckcfg/multistrap.conf).
  -E <env>    : File to load environment variables from whe using chroot.
  -u          : Update the base system, even if directory already exists.

action is one of:
  setup : Setup initrd.
  enter : Enter initrd.
  pack  : Pack the initrd.
  qemu  : Start a QEMU instance to test the generated initrd.
ENDL
    exit $1
}

in_target_fix() {
    local scripts

    name=$1
    action=$2

    [[ -f $ROOT/fixes/$name ]] && scripts[0]=$ROOT/fixes/$name
    [[ -f $o_dir/fixes/$name ]] && scripts[1]=$o_dir/fixes/$name

    if [[ -z ${scripts[@]} ]]; then
        error "no such fix: $name"
        return 1
    fi

    b="/.fix.bin"
    outer_b="$o_target/.fix.bin"

    status_code=0

    echo ${scripts[@]}

    for script in ${scripts[@]}; do
        notice "target: <$script>"

        cp -a $script $outer_b

        (
            source $o_fakechroot_env;
            $o_root_cmd $chroot $o_target $o_shell -c "exec $b $action"
        )

        [[ $? -ne 0 ]] && status_code=1

        rm -f $outer_b
    done

    return $status_code
}

in_target_run() {
    # run chroot invocation inside of a subshell
    # this allows us to override some useful environment variables
    # at leisure.

    command="$1"
    target_file=$2

    notice "target: $command"

    (
        source $o_fakechroot_env;
        exec $o_root_cmd $chroot $o_target $o_shell -c "$command"
    )

    return $?
}

install_file() {
    local sources

    original_spath=${1#/*}
    original_tpath=$2
    owner=${3:-"root"}
    mode=${4:-"0755"}

    spath=${original_spath#/*}
    tpath=${original_tpath#/*}

    [[ -d $ROOT/files ]] && sources[0]=$ROOT/files/$source_path
    [[ -d $o_dir/files ]] && sources[1]=$o_dir/files/$source_path

    target_dir=$o_target/$tpath

    $o_root_cmd mkdir -p $target_dir

    for path in ${sources[@]}; do
        [[ ! -f $path ]] && continue
        notice "installing $path into $original_tpath"
        $o_root_cmd install -o $owner -m $mode -t $target_dir $path
    done

    return $?
}

fix_target() {
    action=$1

    f[0]=$ROOT/duckcfg/fixes
    f[1]=$o_dir/duckcfg/fixes

    fixes=$o_target/.fixes

    status_code=0

    while read fix; do
        name="$fix:$action"

        if test -f $fixes && grep "$name" $fixes 2>&1 > /dev/null; then
            notice "fix already applied: $name"
            continue
        fi

        notice "running fix: $name"

        if ! in_target_fix $fix $action; then
            error "fix failed: $name"
            status_code=1
            continue
        fi

        echo "$name" >> $fixes
    done < <(read_config_lines "${f[@]}")

    return $status_code
}

disable_runlevel() {
    runlevel=$1

    list="ls -1 /etc/rc$runlevel.d"
    filter="grep -E '^S' | sed -e 's/^...\(.*\)$/\1/'"

    notice "disabling runlevel $runlevel"

    while read service; do
        notice "disabling service: $service"
        in_target_run "update-rc.d -f $service remove"
    done < <(in_target_run "$list" | $o_shell -c "$filter")

    return $?
}

disable_boot_services() {
    if ! disable_runlevel 'S'; then
        return 1
    fi

    if ! disable_runlevel '2'; then
        return 1
    fi

    return 0
}

configure_service() {
    service=$1

    config="$service"

    [[ ! -z $2 ]] && config="$config start $2"
    [[ ! -z $3 ]] && config="$config stop $3"

    notice "enabling service: $service"
    in_target_run "update-rc.d -f $config"

    return $?
}

enable_boot_services() {
    conf[0]=$ROOT/duckcfg/services
    conf[1]=$o_dir/duckcfg/services

    while true; do
        IFS=':' read service start stop

        if [[ $? -ne 0 ]]; then
            break
        fi

        if ! configure_service "$service" "$start" "$stop"; then
            return 1
        fi
    done < <(read_config_lines "${conf[@]}")

    return 0
}

system_bootstrap() {
    status=$o_target/tmp/.multistrapped

    if [[ -f $status && "$o_update" != "yes" ]]; then
        notice "not setting up base system"
        return 0
    fi

    if ! check_command $multistrap; then
        return 1
    fi

    multistrap_path="$COMMAND"

    mkdir -p $o_target

    notice "setting up base system"

    if ! $o_root_cmd $multistrap_path -d $o_target -f $o_multistrap_config; then
        error "failed to setup base system"
        return 1
    fi

    if ! $o_root_cmd touch $status; then
        error "touch: $status"
        return 1
    fi

    return 0
}

install_files() {
    conf[0]=$ROOT/duckcfg/files
    conf[1]=$o_dir/duckcfg/files

    while read source_path target_path owner mode; do
        install_file $source_path $target_path $owner $mode
    done < <(read_config_lines "${conf[@]}")

    return 0
}

action_setup() {
    notice "setting up system with multistrap"

    if ! system_bootstrap; then
        error "failed to setup system with multistrap"
        return 1
    fi

    notice "pre-patching target system:"

    if ! fix_target "pre"; then
        error "problem pre-patching"
        return 1;
    fi

    notice "configuring packages"

    if ! in_target_run "dpkg --force-all --configure -a"; then
        error "problem configuring packages"
        return 1;
    fi

    notice "installing files"

    if ! install_files; then
        error "problem installing files"
        return 1
    fi

    notice "post-patching target system:"

    if ! fix_target "post"; then
        error "problem post-patching"
        return 1;
    fi

    notice "disabling boot services in target system"

    if ! disable_boot_services; then
        error "failed to disable boot services"
        return 1
    fi

    notice "enabling boot services"

    if ! enable_boot_services; then
        error "failed to enable boot services"
        return 1
    fi

    notice "all done!"
    return 0
}

action_enter() {
    if ! check_command "$chroot"; then
        return 1
    fi

    chroot_path="$COMMAND"

    notice  "$o_root_cmd $chroot_path $o_target $o_shell"

    source $o_fakechroot_env
    exec $o_root_cmd $chroot_path $o_target $o_shell
}

action_pack() {
    if [[ ! -d $o_target ]]; then 
        error "expected directory at: $o_target"
        return 0
    fi

    notice "packing $o_initrd"

    pack="cd $o_target; find . | $cpio --create --format newc"

    if ! $o_root_cmd $o_shell -c "$pack" | gzip > $o_initrd; then
        error "failed to pack initrd"
        return 1
    fi

    notice "done!"
    return 0
}

action_qemu() {
    if [[ ! -f $o_kernel ]]; then
        error "expected kernel at: $o_kernel"
        return 1
    fi

    opts="-serial stdio -m 512 -curses"
    opts="$opts -append duck/mode=testing"

    if ! check_command $qemu; then
        return 1
    fi

    qemu_path="$COMMAND"

    $qemu_path \
        -kernel $o_kernel \
        -initrd $o_initrd \
        $opts

    return $?
}

check_command() {
    command=$1

    COMMAND=""

    while read -d ':' path; do
        [[ -x "$path/$command" ]] && COMMAND="$path/$command" && break
    done <<< "$DUCK_PATH"

    if [[ -z $COMMAND ]]; then
        error "command not found: $command"
        return 1
    fi

    export COMMAND="$COMMAND"

    return 0
}

read_opts() {
    while getopts "hrus:d:t:i:k:m:E:" opt; do
        case $opt in
        h)
            print_help 0;
            return 1
        ;;
        \?)
            error "invalid option: -$OPTARG"
            exit 1
        ;;
        u) o_update="yes" ;;
        r) o_root_cmd="sudo -E";;
        s) o_shell="$OPTARG";;
        d) o_dir="$OPTARG";;
        t) o_target="$OPTARG";;
        i) o_initrd="$OPTARG";;
        k) o_kernel="$OPTARG";;
        m) o_multistrap_config="$OPTARG";;
        E) o_fakechroot_env="$OPTARG";;
        esac
    done

    [[ -z "$o_target" ]] && o_target="$o_dir/tmp/initrd"
    [[ -z "$o_initrd" ]] && o_initrd="$o_dir/initrd.gz"
    [[ -z "$o_kernel" ]] && o_kernel="$o_dir/vmlinuz"
    [[ -z "$o_multistrap_config" ]] && o_multistrap_config="$o_dir/duckcfg/multistrap.conf"
    [[ -z "$o_fakechroot_env" ]] && o_fakechroot_env="$ROOT/duckcfg/fakechroot.env"

    if [[ -z "$o_root_cmd" ]]; then
        check_command "$fakeroot" || return 1
        fakeroot_path="$COMMAND"
        check_command "$fakechroot" || return 1
        fakechroot_path="$COMMAND"
        o_root_cmd="$fakeroot_path $fakechroot_path"
    fi

    if [[ ! -d $o_dir/duckcfg ]]; then
        error "missing: $o_dir/duckcfg"
        return 1
    fi

    if [[ ! -f $o_fakechroot_env ]]; then
        error "missing: $o_fakechroot_env"
        return 1
    fi

    export OPTIND
}

handle_action() {
    action=$1

    case "$action" in
        setup)
            action_setup;
        ;;
        enter)
            action_enter;
        ;;
        pack)
            action_pack;
        ;;
        qemu)
            action_qemu;
        ;;
        *)
            error "invalid action: $action";
            return 1;
        ;;
    esac

    return $?
}

if [[ ! -d $CFGDIR ]]; then
    error "no configuration directory: $CFGDIR"
    exit 1
fi

if ! read_opts "$@"; then
    exit 0
fi

shift $((OPTIND-1))

if [[ $# -eq 0 ]]; then
    set -- "$default_action"
fi

while [[ $# -gt 0 ]]; do
    action=$1

    if ! handle_action "$action"; then
        error "action failed: $1"
        exit 1
    fi

    shift
done

exit $?
